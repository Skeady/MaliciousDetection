import datetime
import logging
import os
import shutil
import tempfile

import SystemScanner
import VirusTotalUtils
from reporting import report_generation_template

logging.getLogger(__name__)


# Used to call the appropriate modules
def run_file_scan(file_path):
    logging.info('Starting SystemScan')
    identified_files = SystemScanner.Scan(file_path)
    number_of_identified_files = len(identified_files.all_files)
    logging.info(f'SystemScan identified {number_of_identified_files} files')
    file_names = ','.join(list(identified_files.individual_files.keys()))
    logging.debug(f'all files identified {file_names}')

    virus_total_results = []
    logging.info('Checking files MD5 hash against VirusTotal Repository')
    for file_name, metadata in identified_files.individual_files.items():
        logging.debug(f'Running on {file_name}: {metadata["md5"]}')
        virus_total_response = VirusTotalUtils.VirusTotalScan(metadata['md5'],
                                                              file_name
        )
        virus_total_results.append(virus_total_response)

    logging.info('Generating scan report')
    all_reports = []
    for file in virus_total_results:
        if int(file.virus_total_response.get('results').get('response_code')) == 1:
            all_reports.append(file.report)

    report = '\n\n'.join(all_reports)
    generated_report = report_generation_template.format(report=report)
    string_timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    report_name = f'malware-detection-scan_{string_timestamp}.txt'

    directory, path = tempfile.mkstemp()
    report_binary = bytes(generated_report, encoding='utf-8')
    os.write(directory, report_binary)
    os.close(directory)
    shutil.copy(path, report_name)
    os.remove(path)
